"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SyncDatabase = void 0;
const Constants_1 = require("./Constants");
const { Events, WSEvents } = Constants_1.Constants;
class SyncDatabase {
    constructor(client) {
        this.client = client;
        this.SHARD_AUTHENTICATED = ({ sessionID, id }) => {
            this.data.shards({ id: id }).set({ sessionID });
        };
        this.SHARD_INVALIDATED = ({ id }) => {
            this.data.shards({ id: id }).sessionID.delete();
        };
        this.onRaw = (packet, shardID) => __awaiter(this, void 0, void 0, function* () {
            if (!packet)
                return;
            if (packet.op !== 0)
                return;
            var EVENT = packet.t;
            var shard = this.client.ws.shards.get(shardID);
            try {
                // @ts-ignore
                if (this[EVENT])
                    return yield this[EVENT](packet.d, shard);
            }
            catch (error) {
                console.error(`error syncing database for ${EVENT}`, error);
            }
        });
    }
    init() {
        this.client.on(Events.RAW, this.onRaw);
        this.client.on(Events.SHARD_AUTHENTICATED, this.SHARD_AUTHENTICATED);
        this.client.on(Events.SHARD_INVALIDATED, this.SHARD_INVALIDATED);
    }
    get data() {
        return this.client.data;
    }
    READY({ user, guilds, presences }) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all([this.data.user.set(user), this.data.guilds.set(guilds)]);
        });
    }
    convertMember(member, presences = []) {
        member = Object.assign({}, member);
        var presence = presences.find((p) => p.user.id === member.user.id);
        if (!presence)
            presence = { status: "offline" };
        else
            presence = Object.assign({}, presence);
        delete presence.user;
        var user = Object.assign(Object.assign({}, member.user), { presence });
        member.id = member.user.id;
        delete member.user;
        delete member.guild_id;
        return { member, user };
    }
    GUILD_CREATE(guild, shard) {
        var users = [];
        var members = guild.members.map((member) => {
            var { member, user } = this.convertMember(member, guild.presences);
            users.push(user);
            return member;
        });
        return Promise.all([
            this.data.guilds({ id: guild.id }).set(Object.assign(Object.assign({}, guild), { members, shardID: shard.id })),
            this.data.users.set(users),
        ]);
    }
    GUILD_UPDATE(guild) {
        return this.data.guilds({ id: guild.id }).set(guild);
    }
    GUILD_DELETE(guild) {
        return this.data.guilds({ id: guild.id }).delete();
    }
    GUILD_MEMBER_ADD(member) {
        member = Object.assign({}, member);
        var { guild_id } = member;
        var { user, member } = this.convertMember(member);
        return Promise.all([
            this.data.guilds({ id: guild_id }).members.push(member),
            this.data.users({ id: user.id }).set(user),
        ]);
    }
    GUILD_MEMBER_REMOVE({ guild_id, user }) {
        return this.data.guilds({ id: guild_id }).members({ id: user.id }).delete();
    }
    GUILD_MEMBER_UPDATE(member) {
        var user, member;
        return __awaiter(this, void 0, void 0, function* () {
            // Sent when a guild member is updated. This will also fire when the user object of a guild member changes.
            member = Object.assign({}, member);
            var { guild_id } = member;
            ({ user, member } = this.convertMember(member));
            var res = yield this.data.guilds({ id: guild_id }).members({ id: member.id }).set(member);
            return Promise.all([this.data.users({ id: user.id }).set(user)]);
        });
    }
    GUILD_MEMBERS_CHUNK({ members, presences = [], chunk_count, chunk_index, guild_id }) {
        var users = [];
        var members = members.map((member) => {
            var { member, user } = this.convertMember(member, presences);
            users.push(user);
        });
        return Promise.all([this.data.guilds({ id: guild_id }).members.set(members), this.data.users.set(users)]);
    }
    GUILD_ROLE_CREATE(role) {
        role = Object.assign({}, role);
        console.log(role);
    }
    GUILD_ROLE_DELETE(role) {
        role = Object.assign({}, role);
        console.log(role);
    }
    GUILD_ROLE_UPDATE(role) {
        role = Object.assign({}, role);
        console.log(role);
    }
    INVITE_CREATE(invite) {
        invite = Object.assign({}, invite);
        console.log(invite);
    }
    INVITE_DELETE(invite) {
        invite = Object.assign({}, invite);
        console.log(invite);
    }
    PRESENCE_UPDATE(member) {
        member = Object.assign({}, member);
        var { status, client_status, activities, game, user } = member;
        return this.data.users({ id: user.id }).presence.set({ status, client_status, activities, game });
    }
    USER_UPDATE(user) {
        user = Object.assign({}, user);
        console.log(user);
    }
    destroy() {
        this.client.off(Events.RAW, this.onRaw);
        this.client.off(Events.SHARD_AUTHENTICATED, this.SHARD_AUTHENTICATED);
        this.client.off(Events.SHARD_INVALIDATED, this.SHARD_INVALIDATED);
    }
}
exports.SyncDatabase = SyncDatabase;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3luY0RhdGFiYXNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0cnVjdHVyZXMvU3luY0RhdGFiYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBLDJDQUF3QztBQUd4QyxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLHFCQUFTLENBQUM7QUFFdkMsTUFBYSxZQUFZO0lBQ3hCLFlBQW1CLE1BQTRCO1FBQTVCLFdBQU0sR0FBTixNQUFNLENBQXNCO1FBWS9DLHdCQUFtQixHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsRUFBRSxFQUF5QixFQUFFLEVBQUU7WUFDbEUsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELENBQUMsQ0FBQztRQUVGLHNCQUFpQixHQUFHLENBQUMsRUFBRSxFQUFFLEVBQXlCLEVBQUUsRUFBRTtZQUNyRCxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNqRCxDQUFDLENBQUM7UUFpSEYsVUFBSyxHQUFHLENBQU8sTUFBVyxFQUFFLE9BQWUsRUFBRSxFQUFFO1lBQzlDLElBQUksQ0FBQyxNQUFNO2dCQUFFLE9BQU87WUFDcEIsSUFBSSxNQUFNLENBQUMsRUFBRSxLQUFLLENBQUM7Z0JBQUUsT0FBTztZQUU1QixJQUFJLEtBQUssR0FBVyxNQUFNLENBQUMsQ0FBQyxDQUFDO1lBQzdCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7WUFFL0MsSUFBSTtnQkFDSCxhQUFhO2dCQUNiLElBQUksSUFBSSxDQUFD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